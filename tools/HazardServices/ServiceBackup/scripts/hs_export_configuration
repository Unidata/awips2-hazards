#!/bin/bash

##
# This software was developed and / or modified by Raytheon Company,
# pursuant to Contract DG133W-05-CQ-1067 with the US Government.
# 
# U.S. EXPORT CONTROLLED TECHNICAL DATA
# This software product contains export-restricted data whose
# export/transfer/disclosure is restricted by U.S. law. Dissemination
# to non-U.S. persons whether in the United States or abroad requires
# an export license or other authorization.
# 
# Contractor Name:        Raytheon Company
# Contractor Address:     6825 Pine Street, Suite 340
#                         Mail Stop B8
#                         Omaha, NE 68106
#                         402.291.0100
# 
# See the AWIPS II Master Rights File ("Master Rights File.pdf") for
# further licensing information.
#
##


##
# Process (tar and gzip) Localization files and send to msg_send.
#
# This is run for a site which needs to export its Localization 
# configuration files for use by a backup site.
#
# SOFTWARE HISTORY
# Date         Ticket#    Engineer    Description
# ------------ ---------- ----------- --------------------------
# Sep 14, 2015 3473       Chris.Cody  Initial version
#
##

# 
# EXPORT 
#

if [ ${#1} = 0 ]
then
     echo "hs_export_configuration : First Parameter must be the Site Id to export. Exit 1"
    exit 1
fi
CAPS_SITE_ID=`echo ${1} | tr [a-z] [A-Z]`

if [ ${#AWIPS_HOME} = 0 ]
then
    AWIPS_HOME=/awips2
fi

export AWIPS_EDEX_SCRIPT_HOME=${AWIPS_HOME}/edex/scripts/HazardServices/ServiceBackup/scripts
export AWIPS_EDEX_CONFIG_HOME=${AWIPS_HOME}/edex/scripts/HazardServices/ServiceBackup/configuration

echo "sourcing ${AWIPS_EDEX_CONFIG_HOME}/svcbu.env"
. ${AWIPS_EDEX_CONFIG_HOME}/svcbu.env
source ${AWIPS_EDEX_SCRIPT_HOME}/serviceBackupUtil.sh

# $1 = Site name
if [ ${#1} = 0 ]
then
    configureLogging "svcbu_hs_export_configuration" "ERR"
    echo "Null/Empty Site Id for Export Configuration. Fail. Exit 1"
    exit 1
fi
SITE_ID=`echo ${1} | tr '[A-Z]' '[a-z]'`
CAPS_SITE_ID=`echo ${1} | tr [a-z] [A-Z]`
export SITE_ID

configureLogging "svcbu_hs_export_configuration" ${SITE_ID}

lock_file=$(getLockFile "exportConfiguration" ${SITE_ID})
lock_status=$(isOperationInProgress "exportConfiguration" ${SITE_ID})
if [[ "${lock_status}" = "true" ]]
then
    echo "Cannot export configuration for ${CAPS_SITE_ID}.  Export configuration process already in progress!"
    exit 1
fi

markTaskInProgress ${lock_file}

if [ ${#MSG_SEND_COMMAND} = 0 ]
then
    echo "Mandatory variable: MSG_SEND_COMMAND unset. Program exits."
    markTaskFailed ${lock_file}
    exit 1
fi

if [ ${#SVCBU_ADDRESSEE} = 0 ]
then
    echo "Mandatory variable: SVCBU_ADDRESSEE unset. Program exits."
    markTaskFailed ${lock_file}
    exit 1
fi

if [ ${#SVCBU_WMO_HEADER} = 0 ]
then
    echo "Mandatory variable: SVCBU_WMO_HEADER unset. Program exits."
    markTaskFailed ${lock_file}
    exit 1
fi

OUTPUT_DIR=$(getTempDirectory "hs_export_configuration" ${CAPS_SITE_ID})
if [ ${#OUTPUT_DIR} = 0 ]
then
    echo "Cannot find or build OUTPUT_DIR ${OUTPUT_DIR}"
    markTaskFailed ${lock_file}
    exit 1
fi

echo "Clearing contents of ${OUTPUT_DIR}"
rm -rf ${OUTPUT_DIR}/*

echo "Preparing configuration files for export..."
edexDest=${OUTPUT_DIR}/HazardServicesConfig/edex_static
commonDest=${OUTPUT_DIR}/HazardServicesConfig/common_static
caveDest=${OUTPUT_DIR}/HazardServicesConfig/cave_static

echo "Making temporary common configuration directories..."
mkdir -p ${commonDest}/configured
mkdir -p ${commonDest}/configured/${CAPS_SITE_ID}
mkdir -p ${commonDest}/configured/${CAPS_SITE_ID}/hazardServices
mkdir -p ${commonDest}/site
mkdir -p ${commonDest}/site/${CAPS_SITE_ID}
mkdir -p ${commonDest}/site/${CAPS_SITE_ID}/hazardServices

echo "Making temporary edex configuration directories..."
mkdir -p ${edexDest}/site
mkdir -p ${edexDest}/configured
mkdir -p ${edexDest}/configured/${CAPS_SITE_ID}
mkdir -p ${edexDest}/configured/${CAPS_SITE_ID}/hazardServices
mkdir -p ${edexDest}/site
mkdir -p ${edexDest}/site/${CAPS_SITE_ID}
mkdir -p ${edexDest}/site/${CAPS_SITE_ID}/hazardServices
mkdir -p ${edexDest}/site/${CAPS_SITE_ID}/config
mkdir -p ${edexDest}/site/${CAPS_SITE_ID}/config/hazardServices

CP_COMMAND="rsync -aq --exclude=*.pyo --exclude=*.pyc --exclude=*.md5"

# Copies the localization information to the staging area
echo "Copying ${LOCALIZATION_PATH}/common_static/configured/${CAPS_SITE_ID}/hazardServices to temporary directory..."
${CP_COMMAND} ${LOCALIZATION_PATH}/common_static/configured/${CAPS_SITE_ID}/hazardServices ${commonDest}/configured/${CAPS_SITE_ID}/
echo "Copying ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE_ID}/hazardServices to temporary directory..."
${CP_COMMAND} ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE_ID}/hazardServices ${commonDest}/site/${CAPS_SITE_ID}/

echo "Copying ${LOCALIZATION_PATH}/edex_static/configured/${CAPS_SITE_ID}/hazardServices to temporary directory..."
${CP_COMMAND} ${LOCALIZATION_PATH}/edex_static/configured/${CAPS_SITE_ID}/hazardServices ${edexDest}/configured/${CAPS_SITE_ID}/
echo "Copying  ${LOCALIZATION_PATH}/edex_static/site/${CAPS_SITE_ID}/hazardServices to temporary directory..."
${CP_COMMAND} ${LOCALIZATION_PATH}/edex_static/site/${CAPS_SITE_ID}/hazardServices ${edexDest}/site/${CAPS_SITE_ID}/
echo "Copying  ${LOCALIZATION_PATH}/edex_static/site/${CAPS_SITE_ID}/hazardServices to temporary directory..."
${CP_COMMAND} ${LOCALIZATION_PATH}/edex_static/site/${CAPS_SITE_ID}/config/hazardServices/siteConfig.py ${edexDest}/site/${CAPS_SITE_ID}/config/hazardServices

#echo "Copying  ${LOCALIZATION_PATH}/cave_static/site/${CAPS_SITE_ID}/hazardServices to temporary directory..."
#${CP_COMMAND} ${LOCALIZATION_PATH}/cave_static/site/${CAPS_SITE_ID}/hazardServices ${caveDest}/site/${CAPS_SITE_ID}/


declare -a EXPORT_SITES=( "${CAPS_SITE_ID}" )

for siteid in "${EXPORT_SITES[@]}"
do
    siteid_lc=`echo ${siteid} | tr '[A-Z]' '[a-z]'`
    siteid_caps=`echo ${siteid} | tr [a-z] [A-Z]`
    
    echo "Preparing site ${siteid_caps}'s compressed file for exporting to central server..."
    
    site_dir=${OUTPUT_DIR}
    if [ "${siteid_caps}" != "${CAPS_SITE_ID}" ]
    then
        site_dir=$(getTempDirectory "hs_export_configuration" ${siteid_caps})
        echo "rm -rf ${site_dir}/*"
        cp -a ${OUTPUT_DIR}/HazardServicesConfig ${site_dir}
    
        ## Re-localize configuration files from the super-domain to the 
        ## needed sub-domain

        # replace HAZARD_SERVICES_SITEID setting in siteConfig.py
        config=${site_dir}/HazardServicesConfig/edex_static/site/hazardServices/siteConfig.py
        ORIG_SITEID=$(egrep "^HAZARD_SERVICES_SITEID" ${config})
        NEW_SITEID="HAZARD_SERVICES_SITEID = '${siteid_caps}'"
        sed -i "s/$ORIG_SITEID/$NEW_SITEID/" ${config}
    fi
    
    echo "Changing to output directory: ${site_dir}"
    cd ${site_dir}
    
    # Tar up everything.
    echo "Tarring and zipping configuration to file ${HS_SVC_CFG_TAR_PREFIX}.${siteid_lc}.tar.gz"
    tar -c ${HS_SVC_CFG_TAR_PREFIX} | gzip -9 > ${HS_SVC_CFG_TAR_PREFIX}.${siteid_lc}.tar.gz
    if [ $? -ne 0 ]
    then
        echo "Failed to make ${HS_SVC_CFG_TAR_PREFIX}.${siteid_lc}.tar.gz. Program exits now."
        markTaskFailed ${lock_file}
        exit 1
    fi
    

    echo "Writing site ID to text file..."
    echo ${siteid_lc} > siteID.txt

    EXPORT_FILE_NAME="${HS_SVC_BKUP_PREFIX}${siteid_lc}.tar"
    EXPORT_PATH_AND_FILE_NAME=${site_dir}/${EXPORT_FILE_NAME}
    echo "Compressing to file ${EXPORT_FILE_NAME}"
    tar -cf ${EXPORT_FILE_NAME} ${HS_SVC_CFG_TAR_PREFIX}.${siteid_lc}.tar.gz siteID.txt
    # check for failure of the tar file
    if [ $? -ne 0 ]
    then
        echo "Failed to make the tar file. Program exits."
        markTaskFailed ${lock_file}
        exit 1
    fi
    
    # Cleanup zip files
    echo "Cleaning up zip files"
    echo "Removing ${site_dir}/*.gz"
    rm -f ${site_dir}/*.gz
    echo "Removing ${site_dir}/siteID.txt"
    rm -f ${site_dir}/siteID.txt
    echo "Removing ${site_dir}/HazardServicesConfig"
    rm -rf ${site_dir}/HazardServicesConfig

    echo "Sending the tar file to the central server..."

    # Check to see if ${SVCBU_WMO_HEADER} is assigned a value. If so, call msg_send with -i.
    # Otherwise, don't call it with -i
    if [ -n "${SVCBU_WMO_HEADER}" ]; then
        MSG_SEND_FLAGS="-e ${site_dir}/${HS_SVC_BKUP_PREFIX}${siteid_lc}.tar -a ${SVCBU_ADDRESSEE} -i ${SVCBU_WMO_HEADER} -s ${siteid_lc}2 -c ${MSG_TYPE_IDENTIFIER}"
    else
        MSG_SEND_FLAGS="-e ${site_dir}/${HS_SVC_BKUP_PREFIX}${siteid_lc}.tar -a ${SVCBU_ADDRESSEE} -s ${siteid_lc}2 -c ${MSG_TYPE_IDENTIFIER}"
    fi
    
    # These configurations options are set in svcbu.properties and placed into the environment by svcbu.env
    # Check to see if ${SVCBU_WMO_HEADER} is assigned a value. If so, call msg_send with -i.
    # Otherwise, don't call it with -i
    if [ -n "${SVCBU_WMO_HEADER}" ]; then
        MSG_SEND_FLAGS="-e ${site_dir}/${HS_SVC_BKUP_PREFIX}${siteid_lc}.tar -a ${SVCBU_ADDRESSEE} -i ${SVCBU_WMO_HEADER} -s ${siteid_lc}2 -c ${MSG_TYPE_IDENTIFIER}"
    else
        MSG_SEND_FLAGS="-e ${site_dir}/${HS_SVC_BKUP_PREFIX}${siteid_lc}.tar -a ${SVCBU_ADDRESSEE} -s ${siteid_lc}2 -c ${MSG_TYPE_IDENTIFIER}"
    fi
    
    echo "Message Send Command: ${$MSG_SEND_COMMAND} ${MSG_SEND_FLAGS}"
    msgSendOutput=$($MSG_SEND_COMMAND $MSG_SEND_FLAGS)
    exitValue=$?
    if [ $exitValue -ne 0 ]
    then
        echo "msg_send FAILED with exit value $exitValue and the following error: $msgSendOutput"
        markTaskFailed ${lock_file}
        exit 1
    else
        echo "Successfully sent message. MESSAGE ID: $msgSendOutput"
    fi

done


echo "Cleaning up temporary files: ${OUTPUT_DIR}/*"
rm -rf ${OUTPUT_DIR}/* "

echo "Configuration data has been exported!"
markTaskSuccess ${lock_file}
exit 0
