#!/bin/bash

##############################################################################
# Process Received Configuration
# This is run at the backup site to import the backed up site's Hazard Services
# site configuration into the localization store.
##############################################################################
if [ ${#AWIPS_HOME} = 0 ]
then
    AWIPS_HOME=/awips2
fi

source ${AWIPS_HOME}/edex/data/utility/edex_static/base/HazardServices/ServiceBackup/configuration/svcbu.properties
source ${HS_SCRIPTS_DIR}/serviceBackupUtil.sh
HS_SVC_CFG_TAR_PREFIX=HazardServicesConfig

# $1 = Path to packaged configuration data from MHS
import_file=${1}

# Create the log file
configureLogging "svcbu_receive_configuration" ${SITE_ID}

echo "The import_file is: $import_file"
FILESIZE=$(stat -c%s "$import_file")
echo "File Size is: $FILESIZE bytes."

SITE_ID=$(getSiteIdFromTarFile "${import_file}")
CAPS_SITE_ID=`echo ${SITE_ID}|tr [a-z] [A-Z]`

# Check the status of the lock file to see if we are OK to proceed
lock_file=$(getLockFile "hs_process_configuration" ${SITE_ID})
lock_status=$(isOperationInProgress "hs_process_configuration" ${SITE_ID})
echo "lock_status ${lock_status}"
if [[ "${lock_status}" = "true" ]]
then
    echo "Cannot import/process configuration for ${CAPS_SITE_ID}.  Import/process configuration process already in progress!"
    markTaskFailed ${lock_file}
    exit 1
fi

USER=$(whoami)
if [ $USER = "root" ]
then
    echo "Running script as root"
elif [ $USER = "awips" ]
then
    echo "Running script as user awips" 
else
    echo "Script must be run as user root or awips"
    markTaskFailed ${lock_file}
    exit 1
fi

if [ ${#SITE_IDENTIFIER} = 0 ]; then
    echo "Mandatory variable: SITE_IDENTIFIER unset. Program exits."
    markTaskFailed ${lock_file}
    exit 1
fi

markTaskInProgress ${lock_file}

if [ ! -f "${import_file}" ]
then
    tempImportPathAndFile="${import_file}/${HS_SVC_BKUP_PREFIX}${SITE_ID}.tar"
    if [ -f "${tempImportPathAndFile}" ]
    then
        import_file="${tempImportPathAndFile}"
    else
        echo "Invalid or inaccessible Backup File: ${import_file}. Fail. Exit 1"
        markTaskFailed ${lock_file}
        exit 1
    fi
else
    echo "Importing Backup File: ${import_file}"
fi

HS_SVC_BKUP_FILENAME=$(basename ${import_file})

if [ ${CAPS_SITE_ID} = ${SITE_IDENTIFIER} ]; then
    echo "Cannot import Backup Site Data for the Local Site Id ${SITE_IDENTIFIER}"
    markTaskFailed ${lock_file}
    exit 1
fi

# Retrieve the Site File for the Site to Backup
OUTPUT_DIR=$(getTempDirectory "hs_process_configuration" ${SITE_ID})
if [ ${#OUTPUT_DIR} = 0 ]
then
    echo "Cannot find or build OUTPUT_DIR ${OUTPUT_DIR}"
    markTaskFailed ${lock_file}
    exit 1
fi

rm -rf ${OUTPUT_DIR}/*
echo "Moving ${import_file} to ${OUTPUT_DIR}/svc_bkup_${SITE_ID}.tar"
cp -f ${import_file} ${OUTPUT_DIR}/svc_bkup_${SITE_ID}.tar

# Update owner and permissions from root to ifps
chmod 777 ${OUTPUT_DIR}/svc_bkup_${SITE_ID}.tar

echo "Extracting files... for site ${CAPS_SITE_ID}"
cd ${OUTPUT_DIR}
tar -xvf svc_bkup_${SITE_ID}.tar
gunzip -c ${HS_SVC_CFG_TAR_PREFIX}.${SITE_ID}.tar.gz | tar xf -
if [ $? -ne 0 ]; then
    echo "\nERROR: Could not explode ${HS_SVC_CFG_TAR_PREFIX}.${SITE_ID}.tar.gz..."
    markTaskFailed ${lock_file}
    exit 1
fi

echo "Checking format of received configuration data..."
if [ -d ${HS_SVC_CFG_TAR_PREFIX} ]; then
    echo "AWIPS II configuration received.  OK to proceed!"
else
    echo "Incorrectly formatted configuration received.  Cannot continue!"
    markTaskFailed ${lock_file}
    exit 1
fi

echo "Checking if localization directories exist for ${CAPS_SITE_ID}"
edex_configured_dest=${LOCALIZATION_PATH}/edex_static/configured/${CAPS_SITE_ID}/
edex_site_dest=${LOCALIZATION_PATH}/edex_static/site/${CAPS_SITE_ID}/
common_configured_dest=${LOCALIZATION_PATH}/common_static/configured/${CAPS_SITE_ID}/
common_site_dest=${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE_ID}/

if [ -d ${edex_configured_dest} ]; then
    echo "edex_static configured directory exists for ${CAPS_SITE_ID}"
else
    echo "Creating edex_static configured directory for ${CAPS_SITE_ID}" 
    mkdir -p ${edex_configured_dest}
fi

if [ -d ${edex_site_dest} ]; then
    echo "edex_static site directory exists for ${CAPS_SITE_ID}"
else
    echo "Creating edex_static site directory for ${CAPS_SITE_ID}" 
    mkdir -p ${edex_site_dest}
fi

if [ -d ${common_configured_dest} ]; then
    echo "common_static configured directory exists for ${CAPS_SITE_ID}"
else
    echo "Creating common_static configured directory for ${CAPS_SITE_ID}"
    mkdir -p ${common_configured_dest}
fi

if [ -d ${common_site_dest} ]; then
    echo "common_static site directory exists for ${CAPS_SITE_ID}"
else
    echo "Creating common_static site directory for ${CAPS_SITE_ID}"
    mkdir -p ${common_site_dest}
fi

echo "${CAPS_SITE_ID}'s localization directories have been verified"

echo "Copying ${OUTPUT_DIR}/${HS_SVC_CFG_TAR_PREFIX}/${CAPS_SITE_ID} files into localization directories under ${edex_configured_dest}"
cp -r ${OUTPUT_DIR}/${HS_SVC_CFG_TAR_PREFIX}/edex_static/configured/${CAPS_SITE_ID}/HazardServices ${edex_configured_dest}
cp -r ${OUTPUT_DIR}/${HS_SVC_CFG_TAR_PREFIX}/edex_static/site/${CAPS_SITE_ID}/HazardServices ${edex_site_dest}
cp -r ${OUTPUT_DIR}/${HS_SVC_CFG_TAR_PREFIX}/common_static/configured/${CAPS_SITE_ID}/HazardServices ${common_configured_dest}
cp -r ${OUTPUT_DIR}/${HS_SVC_CFG_TAR_PREFIX}/common_static/site/${CAPS_SITE_ID}/HazardServices  ${common_site_dest}
echo "Files successfully copied!"

echo "Changing ownership of received configuration"
if [ $USER = "root" ]
then
    chown -R awips:fxalpha ${LOCALIZATION_PATH}/edex_static/configured/${CAPS_SITE_ID}/HazardServices
    chown -R awips:fxalpha ${LOCALIZATION_PATH}/edex_static/site/${CAPS_SITE_ID}/HazardServices
    chown -R awips:fxalpha ${LOCALIZATION_PATH}/common_static/configured/${CAPS_SITE_ID}/HazardServices
    chown -R awips:fxalpha ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE_ID}/HazardServices
elif [ $USER = "awips" ]
then
    echo "Files already owned by awips"
fi

# Cleanup
rm -rf ${OUTPUT_DIR}/*
markTaskSuccess ${lock_file}
echo "Configuration Import Complete!"
exit 0