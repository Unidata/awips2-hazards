#!/bin/bash

##############################################################################
# Process Received Configuration
# This is run at the backup site to import the backed up site's Hazard Services
# site configuration into the localization store.
##############################################################################

# This script can be executed by root or the following user.  Paths will be
# chown'd to this user.
nonRootUser=awips

if [ ${#AWIPS_HOME} = 0 ]
then
    AWIPS_HOME=/awips2
fi

source ${AWIPS_HOME}/edex/data/utility/edex_static/base/HazardServices/ServiceBackup/configuration/svcbu.properties
source ${HS_SCRIPTS_DIR}/serviceBackupUtil.sh

# When exiting the script, run this function.
function onExit {
    # If the task is still in progress by this PID, we didn't hit the
    # markTaskSuccess at the end.  So mark the task as failed.
    lock_file=$(getLockFile "hs_process_configuration" ${SITE_ID})
    lock_status=$(isOperationInProgressByMe "hs_process_configuration" ${SITE_ID})
    if [[ "${lock_status}" = "true" ]]
    then
        markTaskFailed ${lock_file}
    fi
}
trap onExit EXIT

HS_SVC_CFG_TAR_PREFIX=HazardServicesServiceBackup
HS_CFG_DIR=HazardServicesConfig
HS_DB_DIR=HazardServicesDatabase

# $1 = Path to packaged configuration data from MHS
import_file=${1}

# Create the log file
configureLogging "svcbu_receive_configuration" ${SITE_ID}

echo "The import_file is: $import_file"
FILESIZE=$(stat -c%s "$import_file")
echo "File Size is: $FILESIZE bytes."

SITE_ID=$(getSiteIdFromTarFile "${import_file}")
CAPS_SITE_ID=`echo ${SITE_ID}|tr [a-z] [A-Z]`

# Check the status of the lock file to see if we are OK to proceed
lock_file=$(getLockFile "hs_process_configuration" ${SITE_ID})
lock_status=$(isOperationInProgress "hs_process_configuration" ${SITE_ID})
echo "lock_status ${lock_status}"
if [[ "${lock_status}" = "true" ]]
then
    echo "Cannot import/process configuration for ${CAPS_SITE_ID}.  Import/process configuration process already in progress!"
    markTaskFailed ${lock_file}
    exit 1
fi

USER=$(whoami)
if [ $USER = "root" ]
then
    echo "Running script as root"
elif [ $USER = $nonRootUser ]
then
    echo "Running script as user $nonRootUser"
else
    echo "Script must be run as user root or $nonRootUser"
    markTaskFailed ${lock_file}
    exit 1
fi

markTaskInProgress ${lock_file}

if [ ! -f "${import_file}" ]
then
    tempImportPathAndFile="${import_file}/${HS_SVC_BKUP_PREFIX}${SITE_ID}.tar"
    if [ -f "${tempImportPathAndFile}" ]
    then
        import_file="${tempImportPathAndFile}"
    else
        echo "Invalid or inaccessible Backup File: ${import_file}. Fail. Exit 1"
        markTaskFailed ${lock_file}
        exit 1
    fi
else
    echo "Importing Backup File: ${import_file}"
fi

HS_SVC_BKUP_FILENAME=$(basename ${import_file})

# Retrieve the Site File for the Site to Backup
OUTPUT_DIR=$(getTempDirectory "hs_process_configuration" ${SITE_ID})
if [ ${#OUTPUT_DIR} = 0 ]
then
    echo "Cannot find or build OUTPUT_DIR ${OUTPUT_DIR}"
    markTaskFailed ${lock_file}
    exit 1
fi

rm -rf ${OUTPUT_DIR}/*
echo "Moving ${import_file} to ${OUTPUT_DIR}/svc_bkup_${SITE_ID}.tar"
cp -f ${import_file} ${OUTPUT_DIR}/svc_bkup_${SITE_ID}.tar

# Update owner and permissions from root to ifps
chmod 777 ${OUTPUT_DIR}/svc_bkup_${SITE_ID}.tar

echo "Extracting files... for site ${CAPS_SITE_ID}"
cd ${OUTPUT_DIR}
tar -xvf svc_bkup_${SITE_ID}.tar
gunzip -c ${HS_SVC_CFG_TAR_PREFIX}.${SITE_ID}.tar.gz | tar xf -
if [ $? -ne 0 ]; then
    echo "\nERROR: Could not explode ${HS_SVC_CFG_TAR_PREFIX}.${SITE_ID}.tar.gz..."
    markTaskFailed ${lock_file}
    exit 1
fi

doImportConfig=0
doImportDatabase=0
echo "Checking format of received configuration data..."
if [ -d ${HS_CFG_DIR} ]; then
    echo "AWIPS II configuration received.  OK to proceed!"
    doImportConfig=1
fi
if [ -d ${HS_DB_DIR} ]; then
    echo "AWIPS II database information received.  OK to proceed!"
    doImportDatabase=1
fi
if [ $doImportConfig = 0 ] && [ $doImportDatabase = 0 ]; then
    echo "Incorrectly formatted file received.  Cannot continue!"
    markTaskFailed ${lock_file}
    exit 1
fi

if [ ! -d ${HS_EDEX_DATA} ]; then
    echo "HS_EDEX_DATA=${HS_EDEX_DATA} is not mounted.  Cannot continue!"
    markTaskFailed ${lock_file}
    exit 1
fi

if [ $doImportConfig = 1 ]; then
   echo "Checking if localization directories exist for ${CAPS_SITE_ID}"
   edex_site_dest=${LOCALIZATION_PATH}/edex_static/site/${CAPS_SITE_ID}/
   common_site_dest=${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE_ID}/

   if [ -d ${edex_site_dest} ]; then
      echo "edex_static site directory exists for ${CAPS_SITE_ID}"
   else
      echo "Creating edex_static site directory for ${CAPS_SITE_ID}"
      mkdir -p ${edex_site_dest}
   fi

   if [ -d ${common_site_dest} ]; then
      echo "common_static site directory exists for ${CAPS_SITE_ID}"
   else
      echo "Creating common_static site directory for ${CAPS_SITE_ID}"
      mkdir -p ${common_site_dest}
   fi

   echo "${CAPS_SITE_ID}'s localization directories have been verified"

   echo "Copying ${OUTPUT_DIR}/${HS_CFG_DIR}/${CAPS_SITE_ID} files into localization directories"
   cp -r ${OUTPUT_DIR}/${HS_CFG_DIR}/edex_static/site/${CAPS_SITE_ID}/HazardServices ${edex_site_dest}
   cp -r ${OUTPUT_DIR}/${HS_CFG_DIR}/common_static/site/${CAPS_SITE_ID}/HazardServices  ${common_site_dest}
   echo "Files successfully copied!"
fi


if [ $doImportDatabase = 1 ]; then
   echo "Creating database table import directories if not present"
   database_dest_temp=${HS_EDEX_DATA_SVCBU_DB}/.svcbutemporary
   database_dest_final=${HS_EDEX_DATA_SVCBU_DB}
   mkdir -p ${database_dest_temp}
   
   echo "Moving database files into directory"
   cp ${OUTPUT_DIR}/${HS_DB_DIR}/* ${database_dest_temp}
   # To prevent the deserialization from reading partial files, use a mv since
   # it should be atomic (if directories are on the same file system).
   mv ${database_dest_temp}/* ${database_dest_final}
   rmdir ${database_dest_temp}

   if [ $USER = "root" ]
   then
      chown -R $nonRootUser:fxalpha ${HS_EDEX_DATA}/*
   fi

   echo "Files successfully copied to ${database_dest_final} on ${HOSTNAME}"
fi

echo "Changing ownership of received configuration"
if [ $USER = "root" ]
then
    chown -R $nonRootUser:fxalpha ${LOCALIZATION_PATH}/edex_static/site/${CAPS_SITE_ID}/HazardServices
    chown -R $nonRootUser:fxalpha ${LOCALIZATION_PATH}/common_static/site/${CAPS_SITE_ID}/HazardServices
    chown -R $nonRootUser:fxalpha ${HAZARD_SERVICES_LOG}
    chown -R $nonRootUser:fxalpha ${HS_LOCK_DIR}
    chown -R $nonRootUser:fxalpha ${HS_SVCBU_HOME}
elif [ $USER = "$nonRootUser" ]
then
    echo "Files already owned by $nonRootUser"
fi

# Cleanup
rm -rf ${OUTPUT_DIR}/*
markTaskSuccess ${lock_file}
echo "Configuration Import Complete!"
exit 0
