/**
 * This software was developed and / or modified by the
 * National Oceanic and Atmospheric Administration (NOAA), 
 * Earth System Research Laboratory (ESRL), 
 * Global Systems Division (GSD), 
 * Information Services Branch (ISB)
 * 
 * Address: Department of Commerce Boulder Labs, 325 Broadway, Boulder, CO 80305
 */
package com.raytheon.uf.viz.hazards.sessionmanager.recommenders;

import java.io.Serializable;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;

import com.google.common.base.Joiner;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;
import com.raytheon.uf.common.dataplugin.events.hazards.HazardConstants.RecommenderTriggerOrigin;
import com.raytheon.uf.common.dataplugin.events.hazards.HazardConstants.Trigger;

import gov.noaa.gsd.common.utilities.IMergeable;
import gov.noaa.gsd.common.utilities.MergeResult;

/**
 * Description: Execution context for a recommender run.
 * <p>
 * TODO: Consider putting this in a new package for tools, and renaming it
 * ToolExecutionContext, so that it is not only for recommenders.
 * </p>
 * 
 * <pre>
 * 
 * SOFTWARE HISTORY
 * Date         Ticket#    Engineer     Description
 * ------------ ---------- ------------ --------------------------
 * Nov 03, 2015   12762    Chris.Golden Initial creation.
 * Jan 28, 2016   12762    Chris.Golden Changed attribute identifier data member to
 *                                      hold a set of identifiers, not just a single
 *                                      one.
 * Mar 04, 2016   15933    Chris.Golden Added unique identifier.
 * Mar 06, 2016   15676    Chris.Golden Added origin to the next ("user" or "other")
 *                                      so that recommenders triggered by hazard 
 *                                      event modifications and visual feature
 *                                      changes know if the user or the software
 *                                      made the change that triggered it.
 * Apr 27, 2016   18266    Chris.Golden Added support for event-driven tools triggered
 *                                      by data layer changes.
 * May 10, 2016   18240    Chris.Golden Added ability to specify arbitrary extra event
 *                                      set attributes as part of the context in which
 *                                      a recommender execution is occurring.
 * Oct 05, 2016   22870    Chris.Golden Added support for event-driven tools triggered
 *                                      by frame changes.
 * May 31, 2017   34684    Chris.Golden Added support for selection-change-triggered
 *                                      recommender execution.
 * Sep 27, 2017   38072    Chris.Golden Implemented merge() and toString() methods,
 *                                      and made an IMergeable.
 * Dec 07, 2017   41886    Chris.Golden Removed Java 8/JDK 1.8 usage.
 * Mar 29, 2018   48027    Chris.Golden Removed "hazard event visual feature changed"
 *                                      recommender trigger, as it has been folded into
 *                                      "hazard event modified".
 * May 22, 2018   15561    Chris.Golden Made extra parameters map immutable.
 * </pre>
 * 
 * @author Chris.Golden
 * @version 1.0
 */
public class RecommenderExecutionContext
        implements IMergeable<RecommenderExecutionContext> {

    // Private Static Variables

    /**
     * Counter shared amongst instances to generate unique identifiers for all
     * instances.
     */
    private static final AtomicLong counter = new AtomicLong();

    // Private Variables

    /**
     * Identifier for this context; will be unique amongst the set of all
     * instances of this class for all practical purposes.
     */
    private final long identifier;

    /**
     * Trigger of this execution.
     */
    private final Trigger trigger;

    /**
     * Origin of the trigger.
     */
    private final RecommenderTriggerOrigin origin;

    /**
     * Identifiers of the hazard events whose change has triggered this
     * execution, or <code>null</code> if the execution was not triggered by a
     * {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     * {@link Trigger#HAZARD_EVENT_SELECTION}.
     */
    private final ImmutableSet<String> eventIdentifiers;

    /**
     * Set of identifiers of the hazard event attributes that changed, or
     * <code>null</code> if the execution was not triggered by a
     * {@link Trigger#HAZARD_EVENT_MODIFICATION}.
     */
    private final ImmutableSet<String> attributeIdentifiers;

    /**
     * Set of identifiers of the hazard event visual features that changed, or
     * <code>null</code> if the execution was not triggered by a
     * {@link Trigger#HAZARD_EVENT_MODIFICATION}.
     */
    private final ImmutableSet<String> visualFeatureIdentifiers;

    /**
     * Suggested event type to be generated by the recommender, or
     * <code>null</code> if the execution was not triggered by a
     * {@link Trigger#HAZARD_TYPE_FIRST}.
     */
    private final String eventType;

    /**
     * Maps of additional entries to be added to the event set.
     */
    private final ImmutableMap<String, Serializable> extraEventSetAttributes;

    // Public Static Methods

    /**
     * Get an empty execution context.
     * 
     * @return Context.
     */
    public static RecommenderExecutionContext getEmptyContext() {
        return new RecommenderExecutionContext(Trigger.NONE,
                RecommenderTriggerOrigin.USER, null, null);
    }

    /**
     * Get an empty execution context that includes extra event set attributes.
     * 
     * @param extraEventSetAttributes
     *            Key-value pairings to be added as attributes to the event set.
     * @return Context.
     */
    public static RecommenderExecutionContext getEmptyContext(
            Map<String, Serializable> extraEventSetAttributes) {
        return new RecommenderExecutionContext(Trigger.NONE,
                RecommenderTriggerOrigin.USER, null, extraEventSetAttributes);
    }

    /**
     * Get a hazard-type-first execution context.
     * 
     * @param eventType
     *            Suggested event type to be generated by the recommender.
     * @param origin
     *            Origin of the trigger.
     * @return Context.
     */
    public static RecommenderExecutionContext getHazardTypeFirstContext(
            String eventType, RecommenderTriggerOrigin origin) {
        return new RecommenderExecutionContext(Trigger.HAZARD_TYPE_FIRST,
                origin, eventType, null);
    }

    /**
     * Get a hazard event modification trigger execution context.
     * 
     * @param eventIdentifier
     *            Identifier of the hazard event whose change has triggered this
     *            execution.
     * @param attributeIdentifiers
     *            Set of identifiers of the hazard event attributes that
     *            changed.
     * @param attributeIdentifiers
     *            Set of identifiers of the hazard event visual features that
     *            changed.
     * @param origin
     *            Origin of the trigger.
     * @return Context.
     */
    public static RecommenderExecutionContext getHazardEventModificationContext(
            String eventIdentifier, Set<String> attributeIdentifiers,
            Set<String> visualFeatureIdentifiers,
            RecommenderTriggerOrigin origin) {
        return new RecommenderExecutionContext(
                Trigger.HAZARD_EVENT_MODIFICATION, origin, eventIdentifier,
                attributeIdentifiers, visualFeatureIdentifiers, null, null);
    }

    /**
     * Get a time interval trigger execution context.
     * 
     * @return Context.
     */
    public static RecommenderExecutionContext getTimeIntervalContext() {
        return new RecommenderExecutionContext(Trigger.TIME_INTERVAL,
                RecommenderTriggerOrigin.OTHER, null, null);
    }

    /**
     * Get a frame change trigger execution context.
     * 
     * @return Context.
     */
    public static RecommenderExecutionContext getFrameChangeContext() {
        return new RecommenderExecutionContext(Trigger.FRAME_CHANGE,
                RecommenderTriggerOrigin.OTHER, null, null);
    }

    /**
     * Get a data layer update trigger execution context.
     * 
     * @return Context.
     */
    public static RecommenderExecutionContext getDataLayerUpdateContext() {
        return new RecommenderExecutionContext(Trigger.DATA_LAYER_UPDATE,
                RecommenderTriggerOrigin.OTHER, null, null);
    }

    /**
     * Get a hazard event selection change trigger execution context.
     * 
     * @param eventIdentifiers
     *            Identifiers of the hazard events whose selection change has
     *            triggered this execution.
     * @param origin
     *            Origin of the trigger.
     * @return Context.
     */
    public static RecommenderExecutionContext getHazardEventSelectionChangeContext(
            Set<String> eventIdentifiers, RecommenderTriggerOrigin origin) {
        return new RecommenderExecutionContext(Trigger.HAZARD_EVENT_SELECTION,
                origin, eventIdentifiers, null, null, null, null);
    }

    // Private Constructors

    /**
     * Construct a standard instance.
     * 
     * @param trigger
     *            Trigger of this execution.
     * @param origin
     *            Origin of this trigger.
     * @param eventType
     *            Suggested event type to be generated by the recommender, or
     *            <code>null</code> if the execution was not triggered by a
     *            {@link Trigger#HAZARD_TYPE_FIRST}.
     * @param extraEventSetAttributes
     *            Key-value pairings to be added as attributes to the event set.
     */
    private RecommenderExecutionContext(Trigger trigger,
            RecommenderTriggerOrigin origin, String eventType,
            Map<String, Serializable> extraEventSetAttributes) {
        this(trigger, origin, (Set<String>) null, null, null, eventType,
                extraEventSetAttributes);
    }

    /**
     * Construct a standard instance.
     * 
     * @param trigger
     *            Trigger of this execution.
     * @param origin
     *            Origin of this trigger.
     * @param eventIdentifier
     *            Identifier of the hazard event whose change has triggered this
     *            execution, or <code>null</code> if the execution was not
     *            triggered by a {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     *            {@link Trigger #HAZARD_EVENT_SELECTION}.
     * @param attributeIdentifiers
     *            Set of identifiers of the hazard event attributes that
     *            changed, or <code>null</code> if the execution was not
     *            triggered by a {@link Trigger#HAZARD_EVENT_MODIFICATION}.
     * @param visualFeatureIdentifiers
     *            Set of identifiers of the hazard event visual features that
     *            changed, or <code>null</code> if the execution was not
     *            triggered by a {@link Trigger#HAZARD_EVENT_MODIFICATION}.
     * @param eventType
     *            Suggested event type to be generated by the recommender, or
     *            <code>null</code> if the execution was not triggered by a
     *            {@link Trigger#HAZARD_TYPE_FIRST}.
     * @param extraEventSetAttributes
     *            Key-value pairings to be added as attributes to the event set.
     */
    private RecommenderExecutionContext(Trigger trigger,
            RecommenderTriggerOrigin origin, String eventIdentifier,
            Set<String> attributeIdentifiers,
            Set<String> visualFeatureIdentifiers, String eventType,
            Map<String, Serializable> extraEventSetAttributes) {
        this.identifier = counter.getAndIncrement();
        this.trigger = trigger;
        this.origin = origin;
        this.eventIdentifiers = (eventIdentifier == null ? null
                : ImmutableSet.copyOf(Sets.newHashSet(eventIdentifier)));
        this.attributeIdentifiers = (attributeIdentifiers == null ? null
                : ImmutableSet.copyOf(attributeIdentifiers));
        this.visualFeatureIdentifiers = (visualFeatureIdentifiers == null ? null
                : ImmutableSet.copyOf(visualFeatureIdentifiers));
        this.eventType = eventType;
        this.extraEventSetAttributes = (extraEventSetAttributes == null ? null
                : ImmutableMap.copyOf(extraEventSetAttributes));
    }

    /**
     * Construct a standard instance.
     * 
     * @param trigger
     *            Trigger of this execution.
     * @param origin
     *            Origin of this trigger.
     * @param eventIdentifiers
     *            Identifiers of the hazard events whose change has triggered
     *            this execution, or <code>null</code> if the execution was not
     *            triggered by a {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     *            {@link Trigger #HAZARD_EVENT_SELECTION}.
     * @param attributeIdentifiers
     *            Set of identifiers of the hazard event attributes that
     *            changed, or <code>null</code> if the execution was not
     *            triggered by a {@link Trigger#HAZARD_EVENT_MODIFICATION}.
     * @param visualFeatureIdentifiers
     *            Set of identifiers of the hazard event visual features that
     *            changed, or <code>null</code> if the execution was not
     *            triggered by a {@link Trigger#HAZARD_EVENT_MODIFICATION}.
     * @param eventType
     *            Suggested event type to be generated by the recommender, or
     *            <code>null</code> if the execution was not triggered by a
     *            {@link Trigger#HAZARD_TYPE_FIRST}.
     * @param extraEventSetAttributes
     *            Key-value pairings to be added as attributes to the event set.
     */
    private RecommenderExecutionContext(Trigger trigger,
            RecommenderTriggerOrigin origin, Set<String> eventIdentifiers,
            Set<String> attributeIdentifiers,
            Set<String> visualFeatureIdentifiers, String eventType,
            Map<String, Serializable> extraEventSetAttributes) {
        this.identifier = counter.getAndIncrement();
        this.trigger = trigger;
        this.origin = origin;
        this.eventIdentifiers = (eventIdentifiers == null ? null
                : ImmutableSet.copyOf(eventIdentifiers));
        this.attributeIdentifiers = (attributeIdentifiers == null ? null
                : ImmutableSet.copyOf(attributeIdentifiers));
        this.visualFeatureIdentifiers = (visualFeatureIdentifiers == null ? null
                : ImmutableSet.copyOf(visualFeatureIdentifiers));
        this.eventType = eventType;
        this.extraEventSetAttributes = (extraEventSetAttributes == null ? null
                : ImmutableMap.copyOf(extraEventSetAttributes));
    }

    // Public Methods

    /**
     * Get the identifier for this context. This will be unique amongst the set
     * of all instances of this class for all practical purposes.
     * 
     * @return Identifier.
     */
    public long getIdentifier() {
        return identifier;
    }

    /**
     * Get the trigger of this execution.
     * 
     * @return Trigger.
     */
    public Trigger getTrigger() {
        return trigger;
    }

    /**
     * Get the origin of the trigger of this execution.
     * 
     * @return Origin.
     */
    public RecommenderTriggerOrigin getOrigin() {
        return origin;
    }

    /**
     * Get the identifiers of the hazard events whose change has triggered this
     * execution, or <code>null</code> if {@link #getTrigger()} yields something
     * other than {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     * {@link Trigger #HAZARD_EVENT_SELECTION}.
     * 
     * @return Trigger event identifiers.
     */
    public ImmutableSet<String> getEventIdentifiers() {
        return eventIdentifiers;
    }

    /**
     * Get the set of identifiers of the hazard event attributes that changed,
     * or <code>null</code> if {@link #getTrigger()} yields something other than
     * {@link Trigger#HAZARD_EVENT_MODIFICATION}.
     * 
     * @return Trigger attribute identifiers.
     */
    public ImmutableSet<String> getAttributeIdentifiers() {
        return attributeIdentifiers;
    }

    /**
     * Get the set of identifiers of the hazard event visual features that
     * changed, or <code>null</code> if {@link #getTrigger()} yields something
     * other than {@link Trigger#HAZARD_EVENT_MODIFICATION}.
     * 
     * @return Trigger visual feature identifiers.
     */
    public ImmutableSet<String> getVisualFeatureIdentifiers() {
        return visualFeatureIdentifiers;
    }

    /**
     * Get the suggested event type to be generated by the recommender, or
     * <code>null</code> if {@link #getTrigger()} yields something other than
     * {@link Trigger#HAZARD_TYPE_FIRST}.
     * 
     * @return Event type.
     */
    public String getEventType() {
        return eventType;
    }

    /**
     * Get the entries to be used as extra event set attributes.
     * 
     * @return Entries to be used as extra event set attributes.
     */
    public Map<String, Serializable> getExtraEventSetAttributes() {
        return extraEventSetAttributes;
    }

    /**
     * Merge the specified context with this one (the subject) if possible,
     * returning the result. Note that for this implementation, there are only
     * two possible results: a merge failure, or a merge success with the object
     * being nullified.
     * 
     * @param original
     *            Object context.
     * @param modified
     *            Ignored for this implementation.
     * @return Result of the attempt.
     */
    @Override
    public MergeResult<? extends RecommenderExecutionContext> merge(
            RecommenderExecutionContext original,
            RecommenderExecutionContext modified) {

        /*
         * A merge is possible only if the triggers and origins of the two
         * contexts are identical.
         */
        if ((getTrigger() == original.getTrigger())
                && (getOrigin() == original.getOrigin())) {

            /*
             * Do not allow merges for "none", "hazard type first", or
             * "time interval" contexts; for "hazard event modification" and
             * "visual feature change" contexts, only allow merges if the event
             * identifiers are the same; for all others, merge the two.
             */
            switch (getTrigger()) {
            case NONE:
            case HAZARD_TYPE_FIRST:
            case TIME_INTERVAL:
                return IMergeable.Helper.getFailureResult();
            case HAZARD_EVENT_MODIFICATION:
                if (getEventIdentifiers()
                        .equals(original.getEventIdentifiers())) {
                    return IMergeable.Helper.getSuccessObjectCancellationResult(
                            new RecommenderExecutionContext(getTrigger(),
                                    getOrigin(), getEventIdentifiers(),
                                    Sets.union(getAttributeIdentifiers(),
                                            original.getAttributeIdentifiers()),
                                    Sets.union(getVisualFeatureIdentifiers(),
                                            original.getVisualFeatureIdentifiers()),
                                    null, null));
                } else {
                    return IMergeable.Helper.getFailureResult();
                }
            case HAZARD_EVENT_SELECTION:
                return IMergeable.Helper.getSuccessObjectCancellationResult(
                        getHazardEventSelectionChangeContext(
                                Sets.union(getEventIdentifiers(),
                                        original.getEventIdentifiers()),
                                getOrigin()));
            default:
                return IMergeable.Helper
                        .getSuccessObjectCancellationResult(this);
            }
        } else {
            return IMergeable.Helper.getFailureResult();
        }
    }

    @Override
    public String toString() {
        StringBuffer buffer = new StringBuffer();
        buffer.append("context: { ID: ");
        buffer.append(identifier);
        buffer.append(", trigger: ");
        buffer.append(trigger);
        buffer.append(", origin: ");
        buffer.append(origin);
        buffer.append(", event type: ");
        buffer.append(eventType);
        buffer.append(", event IDs: [");
        if (eventIdentifiers != null) {
            buffer.append(Joiner.on(", ").join(eventIdentifiers));
        }
        buffer.append("], attribute IDs: [");
        if (attributeIdentifiers != null) {
            buffer.append(Joiner.on(", ").join(attributeIdentifiers));
        }
        buffer.append("], visual feature IDs: [");
        if (visualFeatureIdentifiers != null) {
            buffer.append(Joiner.on(", ").join(visualFeatureIdentifiers));
        }
        buffer.append("], extra attributes: {");
        if (extraEventSetAttributes != null) {
            buffer.append(Joiner.on(", ").withKeyValueSeparator(": ")
                    .join(extraEventSetAttributes));
        }
        buffer.append("} }");
        return buffer.toString();
    }
}
