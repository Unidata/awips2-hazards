/**
 * This software was developed and / or modified by the
 * National Oceanic and Atmospheric Administration (NOAA), 
 * Earth System Research Laboratory (ESRL), 
 * Global Systems Division (GSD), 
 * Information Services Branch (ISB)
 * 
 * Address: Department of Commerce Boulder Labs, 325 Broadway, Boulder, CO 80305
 */
package com.raytheon.uf.viz.hazards.sessionmanager.recommenders;

import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;

import com.google.common.collect.ImmutableSet;
import com.raytheon.uf.common.dataplugin.events.hazards.HazardConstants.RecommenderTriggerOrigin;
import com.raytheon.uf.common.dataplugin.events.hazards.HazardConstants.Trigger;

/**
 * Description: Execution context for a recommender run.
 * <p>
 * TODO: Consider putting this in a new package for tools, and renaming it
 * ToolExecutionContext, so that it is not only for recommenders.
 * </p>
 * 
 * <pre>
 * 
 * SOFTWARE HISTORY
 * Date         Ticket#    Engineer     Description
 * ------------ ---------- ------------ --------------------------
 * Nov 03, 2015   12762    Chris.Golden Initial creation.
 * Jan 28, 2016   12762    Chris.Golden Changed attribute identifier data member to
 *                                      hold a set of identifiers, not just a single
 *                                      one.
 * Mar 04, 2016   15933    Chris.Golden Added unique identifier.
 * Mar 06, 2016   15676    Chris.Golden Added origin to the next ("user" or "other")
 *                                      so that recommenders triggered by hazard 
 *                                      event modifications and visual feature
 *                                      changes know if the user or the software
 *                                      made the change that triggered it.
 * </pre>
 * 
 * @author Chris.Golden
 * @version 1.0
 */
public class RecommenderExecutionContext {

    // Private Static Variables

    /**
     * Counter shared amongst instances to generate unique identifiers for all
     * instances.
     */
    private static final AtomicLong counter = new AtomicLong();

    // Private Variables

    /**
     * Identifier for this context; will be unique amongst the set of all
     * instances of this class for all practical purposes.
     */
    private final long identifier;

    /**
     * Trigger of this execution.
     */
    private final Trigger trigger;

    /**
     * Origin of the trigger.
     */
    private final RecommenderTriggerOrigin origin;

    /**
     * Identifier of the hazard event whose change has triggered this execution,
     * or <code>null</code> if the execution was not triggered by a
     * {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     * {@link Trigger #HAZARD_EVENT_VISUAL_FEATURE_CHANGE}.
     */
    private final String eventIdentifier;

    /**
     * Set of identifiers of the hazard event attributes or visual features that
     * changed, or <code>null</code> if the execution was not triggered by a
     * {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     * {@link Trigger #HAZARD_EVENT_VISUAL_FEATURE_CHANGE}.
     */
    private final ImmutableSet<String> attributeIdentifiers;

    /**
     * Suggested event type to be generated by the recommender, or
     * <code>null</code> if the execution was not triggered by a
     * {@link Trigger#HAZARD_TYPE_FIRST}.
     */
    private final String eventType;

    // Public Static Methods

    /**
     * Get an empty execution context.
     * 
     * @return Context.
     */
    public static RecommenderExecutionContext getEmptyContext() {
        return new RecommenderExecutionContext(Trigger.NONE,
                RecommenderTriggerOrigin.USER, null, null, null);
    }

    /**
     * Get a hazard-type-first execution context.
     * 
     * @param eventType
     *            Suggested event type to be generated by the recommender.
     * @param origin
     *            Origin of the trigger.
     * @return Context.
     */
    public static RecommenderExecutionContext getHazardTypeFirstContext(
            String eventType, RecommenderTriggerOrigin origin) {
        return new RecommenderExecutionContext(Trigger.HAZARD_TYPE_FIRST,
                origin, null, null, eventType);
    }

    /**
     * Get a hazard event modification trigger execution context.
     * 
     * @param eventIdentifier
     *            Identifier of the hazard event whose change has triggered this
     *            execution.
     * @param attributeIdentifiers
     *            Set of identifiers of the hazard event attributes that
     *            changed.
     * @param origin
     *            Origin of the trigger.
     * @return Context.
     */
    public static RecommenderExecutionContext getHazardEventModificationContext(
            String eventIdentifier, Set<String> attributeIdentifiers,
            RecommenderTriggerOrigin origin) {
        return new RecommenderExecutionContext(
                Trigger.HAZARD_EVENT_MODIFICATION, origin, eventIdentifier,
                attributeIdentifiers, null);
    }

    /**
     * Get a hazard event visual feature change trigger execution context.
     * 
     * @param eventIdentifier
     *            Identifier of the hazard event whose visual feature change has
     *            triggered this execution.
     * @param attributeIdentifiers
     *            Set of identifiers of the visual features that changed.
     * @param origin
     *            Origin of the trigger.
     * @return Context.
     */
    public static RecommenderExecutionContext getHazardEventVisualFeatureChangeContext(
            String eventIdentifier, Set<String> attributeIdentifiers,
            RecommenderTriggerOrigin origin) {
        return new RecommenderExecutionContext(
                Trigger.HAZARD_EVENT_VISUAL_FEATURE_CHANGE, origin,
                eventIdentifier, attributeIdentifiers, null);
    }

    /**
     * Get a time interval trigger execution context.
     * 
     * @return Context.
     */
    public static RecommenderExecutionContext getTimeIntervalContext() {
        return new RecommenderExecutionContext(Trigger.TIME_INTERVAL,
                RecommenderTriggerOrigin.OTHER, null, null, null);
    }

    // Private Constructors

    /**
     * Construct a standard instance.
     * 
     * @param trigger
     *            Trigger of this execution.
     * @param origin
     *            Origin of this trigger.
     * @param eventIdentifier
     *            Identifier of the hazard event whose change has triggered this
     *            execution, or <code>null</code> if the execution was not
     *            triggered by a {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     *            {@link Trigger #HAZARD_EVENT_VISUAL_FEATURE_CHANGE}.
     * @param attributeIdentifiers
     *            Set of identifiers of the hazard event attributes or visual
     *            features that changed, or <code>null</code> if the execution
     *            was not triggered by a
     *            {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     *            {@link Trigger #HAZARD_EVENT_VISUAL_FEATURE_CHANGE}.
     * @param eventType
     *            Suggested event type to be generated by the recommender, or
     *            <code>null</code> if the execution was not triggered by a
     *            {@link Trigger#HAZARD_TYPE_FIRST}.
     */
    private RecommenderExecutionContext(Trigger trigger,
            RecommenderTriggerOrigin origin, String eventIdentifier,
            Set<String> attributeIdentifiers, String eventType) {
        this.identifier = counter.getAndIncrement();
        this.trigger = trigger;
        this.origin = origin;
        this.eventIdentifier = eventIdentifier;
        this.attributeIdentifiers = (attributeIdentifiers == null ? null
                : ImmutableSet.copyOf(attributeIdentifiers));
        this.eventType = eventType;
    }

    // Public Methods

    /**
     * Get the identifier for this context. This will be unique amongst the set
     * of all instances of this class for all practical purposes.
     * 
     * @return Identifier.
     */
    public long getIdentifier() {
        return identifier;
    }

    /**
     * Get the trigger of this execution.
     * 
     * @return Trigger.
     */
    public Trigger getTrigger() {
        return trigger;
    }

    /**
     * Get the origin of the trigger of this execution.
     * 
     * @return Origin.
     */
    public RecommenderTriggerOrigin getOrigin() {
        return origin;
    }

    /**
     * Get the identifier of the hazard event whose change has triggered this
     * execution, or <code>null</code> if {@link #getTrigger()} yields something
     * other than {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     * {@link Trigger #HAZARD_EVENT_VISUAL_FEATURE_CHANGE}.
     * 
     * @return Trigger event identifier.
     */
    public String getEventIdentifier() {
        return eventIdentifier;
    }

    /**
     * Get the set of identifiers of the hazard event attributes or visual
     * features that changed, or <code>null</code> if {@link #getTrigger()}
     * yields something other than {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     * {@link Trigger #HAZARD_EVENT_VISUAL_FEATURE_CHANGE}.
     * 
     * @return Trigger attribute identifiers.
     */
    public ImmutableSet<String> getAttributeIdentifiers() {
        return attributeIdentifiers;
    }

    /**
     * Get the suggested event type to be generated by the recommender, or
     * <code>null</code> if {@link #getTrigger()} yields something other than
     * {@link Trigger#HAZARD_TYPE_FIRST}.
     * 
     * @return Event type.
     */
    public String getEventType() {
        return eventType;
    }
}
