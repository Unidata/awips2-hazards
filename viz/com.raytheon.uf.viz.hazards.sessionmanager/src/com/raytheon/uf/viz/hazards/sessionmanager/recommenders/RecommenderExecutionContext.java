/**
 * This software was developed and / or modified by the
 * National Oceanic and Atmospheric Administration (NOAA), 
 * Earth System Research Laboratory (ESRL), 
 * Global Systems Division (GSD), 
 * Information Services Branch (ISB)
 * 
 * Address: Department of Commerce Boulder Labs, 325 Broadway, Boulder, CO 80305
 */
package com.raytheon.uf.viz.hazards.sessionmanager.recommenders;

import com.raytheon.uf.common.dataplugin.events.hazards.HazardConstants.Trigger;

/**
 * Description: Execution context for a recommender run.
 * <p>
 * TODO: Consider putting this in a new package for tools, and renaming it
 * ToolExecutionContext, so that it is not only for recommenders.
 * </p>
 * 
 * <pre>
 * 
 * SOFTWARE HISTORY
 * Date         Ticket#    Engineer     Description
 * ------------ ---------- ------------ --------------------------
 * Nov 03, 2015   12762    Chris.Golden Initial creation.
 * </pre>
 * 
 * @author Chris.Golden
 * @version 1.0
 */
public class RecommenderExecutionContext {

    // Private Static Constants

    /**
     * Empty recommender execution context.
     */
    private static final RecommenderExecutionContext EMPTY_CONTEXT = new RecommenderExecutionContext(
            Trigger.NONE, null, null, null);

    /**
     * Time interval recommender execution context.
     */
    private static final RecommenderExecutionContext TIME_INTERVAL_CONTEXT = new RecommenderExecutionContext(
            Trigger.TIME_INTERVAL, null, null, null);

    // Private Variables

    /**
     * Trigger of this execution.
     */
    private final Trigger trigger;

    /**
     * Identifier of the hazard event whose change has triggered this execution,
     * or <code>null</code> if the execution was not triggered by a
     * {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     * {@link Trigger #HAZARD_EVENT_DECORATION_CHANGE}.
     */
    private final String eventIdentifier;

    /**
     * Identifier of the hazard event attribute or decoration attribute that
     * changed, or <code>null</code> if the execution was not triggered by a
     * {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     * {@link Trigger #HAZARD_EVENT_DECORATION_CHANGE}.
     */
    private final String attributeIdentifier;

    /**
     * Suggested event type to be generated by the recommender, or
     * <code>null</code> if the execution was not triggered by a
     * {@link Trigger#HAZARD_TYPE_FIRST}.
     */
    private final String eventType;

    // Public Static Methods

    /**
     * Get an empty execution context.
     * 
     * @return Context.
     */
    public static RecommenderExecutionContext getEmptyContext() {
        return EMPTY_CONTEXT;
    }

    /**
     * Get a hazard-type-first execution context.
     * 
     * @param eventType
     *            Suggested event type to be generated by the recommender.
     * @return Context.
     */
    public static RecommenderExecutionContext getHazardTypeFirstContext(
            String eventType) {
        return new RecommenderExecutionContext(Trigger.HAZARD_TYPE_FIRST, null,
                null, eventType);
    }

    /**
     * Get a hazard event modification trigger execution context.
     * 
     * @param eventIdentifier
     *            Identifier of the hazard event whose change has triggered this
     *            execution.
     * @param attributeIdentifier
     *            Identifier of the hazard event attribute that changed.
     * @return Context.
     */
    public static RecommenderExecutionContext getHazardEventModificationContext(
            String eventIdentifier, String attributeIdentifier) {
        return new RecommenderExecutionContext(
                Trigger.HAZARD_EVENT_MODIFICATION, eventIdentifier,
                attributeIdentifier, null);
    }

    /**
     * Get a hazard event decoration change trigger execution context.
     * 
     * @param eventIdentifier
     *            Identifier of the hazard event whose decoration change has
     *            triggered this execution.
     * @param attributeIdentifier
     *            Identifier of the decoration attribute that changed.
     * @return Context.
     */
    public static RecommenderExecutionContext getHazardEventDecorationChangeContext(
            String eventIdentifier, String attributeIdentifier) {
        return new RecommenderExecutionContext(
                Trigger.HAZARD_EVENT_DECORATION_CHANGE, eventIdentifier,
                attributeIdentifier, null);
    }

    /**
     * Get a time interval trigger execution context.
     * 
     * @return Context.
     */
    public static RecommenderExecutionContext getTimeIntervalContext() {
        return TIME_INTERVAL_CONTEXT;
    }

    // Private Constructors

    /**
     * Construct a standard instance.
     * 
     * @param trigger
     *            Trigger of this execution.
     * @param eventIdentifier
     *            Identifier of the hazard event whose change has triggered this
     *            execution, or <code>null</code> if the execution was not
     *            triggered by a {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     *            {@link Trigger #HAZARD_EVENT_DECORATION_CHANGE}.
     * @param attributeIdentifier
     *            Identifier of the hazard event attribute or decoration
     *            attribute that changed, or <code>null</code> if the execution
     *            was not triggered by a
     *            {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     *            {@link Trigger #HAZARD_EVENT_DECORATION_CHANGE}.
     * @param eventType
     *            Suggested event type to be generated by the recommender, or
     *            <code>null</code> if the execution was not triggered by a
     *            {@link Trigger#HAZARD_TYPE_FIRST}.
     */
    private RecommenderExecutionContext(Trigger trigger,
            String eventIdentifier, String attributeIdentifier, String eventType) {
        this.trigger = trigger;
        this.eventIdentifier = eventIdentifier;
        this.attributeIdentifier = attributeIdentifier;
        this.eventType = eventType;
    }

    // Public Methods

    /**
     * Get the trigger of this execution.
     * 
     * @return Trigger.
     */
    public Trigger getTrigger() {
        return trigger;
    }

    /**
     * Get the identifier of the hazard event whose change has triggered this
     * execution, or <code>null</code> if {@link #getTrigger()} yields something
     * other than {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     * {@link Trigger #HAZARD_EVENT_DECORATION_CHANGE}.
     * 
     * @return Trigger event identifier.
     */
    public String getEventIdentifier() {
        return eventIdentifier;
    }

    /**
     * Get the identifier of the hazard event attribute or decoration attribute
     * that changed, or <code>null</code> if {@link #getTrigger()} yields
     * something other than {@link Trigger#HAZARD_EVENT_MODIFICATION} or
     * {@link Trigger #HAZARD_EVENT_DECORATION_CHANGE}.
     * 
     * @return Trigger attribute identifier.
     */
    public String getAttributeIdentifier() {
        return attributeIdentifier;
    }

    /**
     * Get the suggested event type to be generated by the recommender, or
     * <code>null</code> if {@link #getTrigger()} yields something other than
     * {@link Trigger#HAZARD_TYPE_FIRST}.
     * 
     * @return Event type.
     */
    public String getEventType() {
        return eventType;
    }
}
