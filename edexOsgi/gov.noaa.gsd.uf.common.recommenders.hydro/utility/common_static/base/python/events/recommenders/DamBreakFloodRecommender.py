"""
Dam Break Flood Recommender

@since: June 2012
@author: GSD Hazard Services Team
"""
import datetime
import RecommenderTemplate
import numpy
import GeometryFactory

from GeneralConstants import *
 
class Recommender(RecommenderTemplate.Recommender):

    def __init__(self):
        """
        Constructs the Dam Break Flood Recommender
        Note that the focal point will have to provide a
        damPolygonDict for the dams in his service area. Or, 
        the focal point can override the 
        getFloodPolygonForDam method.
        @param executiveService: A reference to the Executive Service
        @param errorCB Error callback.
        """
        self.DEFAULT_FFW_DURATION_IN_MS = 10800000
        self.damPolygonDict = {"Branch Oak Dam":[[-96.85449113562532,40.96250664273423], [-96.8501417755166,40.95861590883002], [-96.84286035582213,40.95552040734565], [-96.8369609577926,40.95319396496816], [-96.83644150846995,40.95306582495168], [-96.83020625044135,40.95087900638188], [-96.82226462682226,40.95001818290366], [-96.81484268733682,40.94993658767985], [-96.80758500889651,40.95010274591382], [-96.801001879531,40.94868872821778], [-96.80048210651451,40.94855991758318], [-96.79338148075364,40.94701706614472], [-96.79076877961657,40.94441432737005], [-96.78815171217119,40.94115907160608], [-96.78518143775872,40.93673378663936], [-96.78361420550357,40.93504588700661], [-96.77978542957075,40.93128132682892], [-96.7778540538979,40.92711558717759], [-96.7809414594977,40.92397007605678], [-96.7798788764335,40.92045150400658], [-96.77813644819493,40.91850158656166], [-96.77604440491442,40.91603077287999], [-96.77429688469284,40.91342745491691], [-96.77428281113995,40.91146794979139], [-96.77582222342025,40.90924039043714], [-96.77649267053839,40.90636377317457], [-96.77401873218531,40.89880013036765], [-96.77520357595517,40.89539993854139], [-96.77603889361286,40.89147910902498], [-96.77688357568476,40.88886423126125], [-96.78028506473146,40.88167019249908], [-96.78371393427186,40.87839391739723], [-96.78469834689611,40.87147196798237], [-96.7844809414313,40.86533391668426], [-96.78375456689757,40.86036973076317], [-96.78422133459459,40.85330825943003], [-96.78417320755777,40.84677670270899], [-96.78241309517512,40.84221193229944], [-96.77737980459224,40.83857393532363], [-96.77218161482456,40.83598112154861], [-96.77111090157285,40.83115174480408], [-96.77038462078539,40.82619030254931], [-96.7688000008703,40.82188477539944], [-96.76551239550481,40.82084974823325], [-96.76326222852175,40.82007196049583], [-96.75809592395468,40.82204706605602], [-96.75258870813143,40.82480752522888], [-96.7491534532703,40.827433924476], [-96.74120939269886,40.82784914081432], [-96.73446228326925,40.82682099206573], [-96.72858793025046,40.82709876619293], [-96.72444129022554,40.82737167413411], [-96.72029545233438,40.82764598689133], [-96.71235732802681,40.82872168033325], [-96.70718901174149,40.83070218444808], [-96.69874499786731,40.83360942687539], [-96.69392100529089,40.83545714174907], [-96.6925427027665,40.83598500849711], [-96.67465474258171,40.84634108130567], [-96.66634862867372,40.85019487305739], [-96.6614895551444,40.85513463646559], [-96.65900352943346,40.86294206442397], [-96.65976627396782,40.8688241939297], [-96.66016388337344,40.87279310976476], [-96.65928289323369,40.87553318336231], [-96.65275753800768,40.87527799781335], [-96.64716260001605,40.8777574508222], [-96.63830337877928,40.88010882110969], [-96.63215900806298,40.88176836942407], [-96.62146887368439,40.88138739529793], [-96.61060672835451,40.88210086761681], [-96.5999124009235,40.88718959934742], [-96.59574893232727,40.89390560695961], [-96.58631493317284,40.89954210538626], [-96.58142439395372,40.90242963887697], [-96.5730857282519,40.90628452822961], [-96.55408952095293,40.9124381923193], [-96.54450962790638,40.91779567002451], [-96.53818898886567,40.92328298755856], [-96.53404409586466,40.92931402849241], [-96.52844239797977,40.93384171409495], [-96.51939626021343,40.93796578783525], [-96.50962253200547,40.94099613336347], [-96.50075034332775,40.94265525037347], [-96.49169927895016,40.94609281389791], [-96.48299574216136,40.94665392204407], [-96.48118223060902,40.94665669601993], [-96.48009448944939,40.94706892286474], [-96.47229702938304,40.94899665862292], [-96.46359093928244,40.95160997190348], [-96.45470857853272,40.95463448933886], [-96.44782369587713,40.95792995995485], [-96.44166485411883,40.96437381989895], [-96.43586660675867,40.97136555816739], [-96.43550418948178,40.97218777701754], [-96.43441707845083,40.978764141616], [-96.43278555271247,40.98040991479593], [-96.42734593673146,40.9872661956805], [-96.42172404652422,40.99110851254234], [-96.41700758333938,40.99563516093459], [-96.41392126754587,41.00262779534968], [-96.41338321194071,41.00797185817329], [-96.412670743108,41.01646667334983], [-96.41285313703933,41.01674037393541], [-96.41158603111307,41.02030437193056], [-96.40533780153829,41.02173427969437], [-96.39900476033914,41.02371849334722], [-96.39856809120145,41.02388379763912], [-96.38534989193253,41.02496622598752], [-96.384148516865,41.02521446881394], [-96.38393014138187,41.02529706892067], [-96.36920178180905,41.03066719085349], [-96.36876709200267,41.03083254750768], [-96.36789782357218,41.03116320180421], [-96.36127490702646,41.03388806944187], [-96.36062008872945,41.03413541133504], [-96.35590436627483,41.03817257486744], [-96.35425473089006,41.0402333151708], [-96.3535977365754,41.04048091661141], [-96.34629560755548,41.04468464283497], [-96.34162947641509,41.04624792002728], [-96.34039514561886,41.04649983973487], [-96.33742747228366,41.04452572459123], [-96.33665973654909,41.04378468402741], [-96.33391710952381,41.04131430490226], [-96.3336980208674,41.04098477563971], [-96.3278580751234,41.03760827453201], [-96.32698272067181,41.03752607898352], [-96.3202846481925,41.03555014255586], [-96.31613701654159,41.03464487055397], [-96.31591750012834,41.03472725840756], [-96.31273870603037,41.03489233564417], [-96.3118553204333,41.03522187003667], [-96.3082085303528,41.03678786547506], [-96.30930199675727,41.03884852240467], [-96.30963063490049,41.03934305288666], [-96.30984973091472,41.03967273944228], [-96.31255210516176,41.04173455005712], [-96.31340958189901,41.04223005257845], [-96.31406630636596,41.04239485388013], [-96.31964787360195,41.04462009494904], [-96.32019512039086,41.04503226269635], [-96.32150884437173,41.04536168622603], [-96.32468409244711,41.04684484285404], [-96.3252313315989,41.04684463580597], [-96.3281859680414,41.04799801068636], [-96.32971820073658,41.04989401779631], [-96.33026550707103,41.05071841147326], [-96.33037496717557,41.05088329115269], [-96.33190711712655,41.05236694577806], [-96.33289196560573,41.05302620670876], [-96.3334391280813,41.05343827005927], [-96.33650278791099,41.05475623081802], [-96.34155161060802,41.05532669649299], [-96.34254200572097,41.05515970114983], [-96.3434230636733,41.05482786237182], [-96.34386352196228,41.05466196573649], [-96.34694145627012,41.053502110341], [-96.34802175466353,41.05309262564951], [-96.35105937527723,41.05153034944244], [-96.35160616296091,41.05111777021997], [-96.35663613047095,41.0488062167956], [-96.35783877212755,41.04814593703632], [-96.35925998970225,41.04740309781376], [-96.3665858363961,41.04443040544317], [-96.37543172502021,41.04129299651107], [-96.37597834733107,41.04129258505592], [-96.37947592662377,41.04038327312828], [-96.38045874572455,41.03980566289989], [-96.38089576355188,41.03964049958524], [-96.38318659034418,41.03733134182861], [-96.38351384085929,41.03700144980825], [-96.38460627044614,41.03658855597349], [-96.38984834142808,41.03419466964232], [-96.39541678804123,41.03188284475498], [-96.39585338090571,41.0317176349551], [-96.40142057959559,41.02981699928924], [-96.40251214057444,41.02940386150492], [-96.40687930927992,41.02816329208238], [-96.41179655802222,41.02898256673326], [-96.41469070383442,41.02701178543513], [-96.42033358935662,41.02590351276332], [-96.42415458806359,41.02411392709821], [-96.42633671099921,41.02260221984431], [-96.4326959032955,41.01642466180809], [-96.43414654274423,41.0138194435504], [-96.43487395201159,41.01354394263051], [-96.43650103501059,41.00847365410931], [-96.4374034894149,41.00504835950494], [-96.43722095509449,41.0047748657629], [-96.43793595828708,40.99970736259937], [-96.43775302714309,40.99943395763088], [-96.43883571077691,40.99696792872872], [-96.44155705251197,40.99490939778156], [-96.44246408428994,40.99422323431308], [-96.4433710729421,40.99353706672839], [-96.44772763075348,40.99120176909422], [-96.44863441698746,40.99051563702292], [-96.45153485120966,40.98804636196621], [-96.45244147403385,40.98736027734812], [-96.45552166813589,40.9844801318435], [-96.46005340542659,40.98104996208862], [-96.46041331337884,40.98022815072986], [-96.46419985912468,40.97365187371204], [-96.46527688379244,40.97050164308705], [-96.46725857631458,40.96666534126935], [-96.46906797893423,40.96529350098394], [-96.47160205021102,40.96364666490759], [-96.47613022799631,40.96158590362471], [-96.48174758962305,40.95979708631484], [-96.48464598551649,40.9586970843383], [-96.49153975440895,40.95882252000146], [-96.49462549469767,40.95936485854577], [-96.49916000760837,40.95935696854871], [-96.51003674412598,40.95796840881765], [-96.51800614490726,40.95494210134964], [-96.52216718494081,40.95233349311616], [-96.5272368651918,40.95040752121686], [-96.53231118009192,40.94985019080479], [-96.53321763565795,40.94984841401528], [-96.53883836391842,40.95011094609579], [-96.54246364270391,40.95010357806316], [-96.54608044485239,40.94804327415292], [-96.55041750610872,40.9450233141339], [-96.55276525341654,40.94310226602068], [-96.55565135338564,40.93994826247735], [-96.55672548295082,40.93679809941108], [-96.55672266796937,40.93611376959178], [-96.55632996483176,40.9287235021573], [-96.55975946174358,40.92570490718285], [-96.56210353151728,40.92309917751111], [-96.56535020517073,40.9198070387399], [-96.5665715914794,40.91287389113837], [-96.56858326543741,40.91588126870754], [-96.57839154953456,40.91558154178512], [-96.57911681497895,40.91530577666737], [-96.59398729190626,40.90828273495076], [-96.60889442690683,40.89920758032032], [-96.60943840071759,40.89865883763043], [-96.62284761233913,40.89287706381864], [-96.63368697729329,40.89011047048059], [-96.64506556822025,40.8861105739069], [-96.64578788576016,40.88583486801866], [-96.65826820651263,40.88347262346919], [-96.66440609367115,40.88112858989689], [-96.67035375541333,40.87782709245602], [-96.67339488315444,40.87357587851072], [-96.67300953432692,40.8709765054172], [-96.67820170806691,40.86247806980349], [-96.67873686653445,40.86124518925235], [-96.67978442181231,40.85535879231668], [-96.68716376206783,40.85013396838748], [-96.69363856885653,40.84491136146816], [-96.69516002493749,40.83989852935012], [-96.70636991392625,40.83724344706032], [-96.71499427326309,40.83525164516987], [-96.7286377421686,40.83364206788571], [-96.73676426365941,40.83414233952172], [-96.74436947583523,40.83451266028526], [-96.75283647276436,40.83487974919463], [-96.758012611615,40.83421001817745], [-96.7600643989618,40.83145707224458], [-96.76072890917902,40.82792322567906], [-96.76349843914227,40.82883058377163], [-96.7633519505293,40.83248957099889], [-96.76355427999407,40.8366689411324], [-96.76428012482447,40.84162979967061], [-96.76775173610831,40.84422757643097], [-96.77155890739738,40.84538876957122], [-96.77554058714531,40.84681036063273], [-96.77488503579511,40.85164593873034], [-96.77323393966263,40.86210202464959], [-96.77414566507632,40.86863399680552], [-96.77503767847239,40.87254890252239], [-96.77558045989693,40.87594207930041], [-96.77043107160245,40.8805307594242], [-96.76356805839673,40.8870889307672], [-96.7603442402541,40.89519942039566], [-96.76092282654395,40.9038164057408], [-96.76254456566417,40.91334416170302], [-96.76521835580296,40.92442941037658], [-96.77152832196295,40.93640641959381], [-96.77187781158801,40.93692650258311], [-96.77956516272178,40.9483689596621], [-96.78738579805288,40.95421939449284], [-96.79379124878345,40.95537396562643], [-96.79396615555414,40.95563461095391], [-96.80954216882439,40.95688917472757], [-96.81040719409413,40.95688625111921], [-96.82511812548714,40.96006673797344], [-96.82668026800344,40.96110110938787], [-96.8383109960071,40.96937721210404], [-96.84247907207275,40.97235343738118], [-96.84663071930359,40.972725861241], [-96.85398893004307,40.96433654612183], [-96.85449113562532,40.96250664273423]],
                               "Council Bluffs Levee":[[-95.86844908574184,41.29436510183439], [-95.87112043946937,41.29039906464121], [-95.87400671636973,41.28556206524735], [-95.88080322371992,41.28105760474818], [-95.88791458362303,41.27702902341068], [-95.89310760115758,41.27529834560976], [-95.90201162643427,41.27199026007382], [-95.90900045701183,41.27058278870992], [-95.91280874101118,41.27035677391338], [-95.91768486726622,41.26814691630266], [-95.91959634248298,41.26664287364798], [-95.9210895344421,41.26410436755604], [-95.92099708823352,41.26037033423723], [-95.91964299245488,41.25631456885219], [-95.9169257391432,41.25137830417526], [-95.91378528069212,41.24659826984225], [-95.9109684361369,41.2407052282969], [-95.90961787376207,41.23704174287754], [-95.90922619300019,41.23202963959022], [-95.91157207674917,41.22838181522948], [-95.90863988040489,41.22431089485118], [-95.90253843708847,41.21943917914067], [-95.89323246123949,41.22012513922036], [-95.88306473299319,41.22351054131322], [-95.87648885975119,41.22714540197032], [-95.87648385085137,41.22794043220713], [-95.87444699947366,41.23246507443306], [-95.87481840038029,41.24065574105281], [-95.87502783878894,41.24097452409806], [-95.87646886675121,41.24718059103972], [-95.87604497997208,41.24733805111938], [-95.87550131901538,41.24972089041052], [-95.87201546546373,41.24923135190081], [-95.87170131302115,41.24875323668221], [-95.8683480748937,41.24405068116418], [-95.8671146115453,41.23856076217677], [-95.865134021827,41.23434114119259], [-95.86471551657998,41.23370391381633], [-95.86461088813452,41.23354460286497], [-95.86324827771769,41.2318711219416], [-95.85744560401251,41.23025968913161], [-95.84992896267008,41.23205926187385], [-95.84950512758893,41.23221663787404], [-95.84844552621539,41.23261006934315], [-95.84738591738729,41.23300348784058], [-95.84165623598467,41.23671976277427], [-95.84165377253908,41.23711733777814], [-95.84141245405762,41.24196670280267], [-95.84151711012579,41.24212609202377], [-95.84473090547196,41.24893315939046], [-95.84575884853638,41.25091449869673], [-95.84733056397481,41.25608436915886], [-95.84693853962672,41.25956114527111], [-95.84461533331665,41.26122120791942], [-95.84436930495622,41.26328173336228], [-95.84763652326642,41.26384977391174], [-95.85039431244336,41.26362309284217], [-95.85508849142887,41.267610473292], [-95.85917189831333,41.27382470696108], [-95.85938131715706,41.2741433760938], [-95.86220172291071,41.27963691058828], [-95.8648087235626,41.28639545369765], [-95.86470050338202,41.28702922675116], [-95.86478624245552,41.2907587884411], [-95.86488936718131,41.29131404091834], [-95.86686177496188,41.29475410361407], [-95.86728277641143,41.29499478182771], [-95.86844908574184,41.29436510183439]]}
        
    def defineScriptMetadata(self):
        """
        @return: JSON string containing information about this
                 tool
        """
        metaDict = {}
        metaDict["toolName"] = "DamBreakFloodRecommender"
        metaDict["author"] = "GSD"
        metaDict["toolType"] = "Recommender"
        metaDict["outputFormat"] = "PYTHON"
        metaDict["returnType"] = "IEvent List"
        metaDict["eventState"] = "Pending"
        return metaDict

    def defineDialog(self):
        """
        @return: MegaWidget dialog definition to solicit user input before running tool
        """        
        dialogDict = {"title": "Dam/Levee Break Flood Recommender"}
        
        damFieldDict = {}
        damFieldDict["fieldName"] = "damName"
        damFieldDict["label"] = "Please Select a Dam or Levee"
        damFieldDict["fieldType"] = "RadioButtons"
        
        damList = ["Branch Oak Dam", "Council Bluffs Levee"]
        damFieldDict["choices"] = damList
        
        urgencyFieldDict = {}
        urgencyFieldDict["fieldName"] = "urgencyLevel"
        urgencyFieldDict["label"] = "Please Select Level of Urgency"
        urgencyFieldDict["fieldType"] = "RadioButtons"
        
        urgencyList = ["Structure has Failed!!", "High Confidence (Structure Failure Imminent)",\
                       "Low Confidence (Potential Structure Failure)"]
        urgencyFieldDict["choices"] = urgencyList
        
        fieldDicts = [damFieldDict, urgencyFieldDict]
        dialogDict["fields"] = fieldDicts
        
        valueDict = {"damName": "Branch Oak Dam", "urgencyLevel":"Structure has Failed!!"}
        dialogDict["valueDict"] = valueDict
        
        return dialogDict
    
    def execute(self, eventSet, dialogInputMap, spatialInputMap):
        """
        @eventSet: List of objects that was converted from Java IEvent objects
        @param dialogInputMap: A map containing user selections from the dialog
        created by the defineDialog() routine
        @param spatialInputMap: A map containing spatial input as created by the 
        definedSpatialInfo() routine
        @return: List of objects that will be later converted to Java IEvent
        objects
        """

        # for a unit test these will fail as we will not have JEP available, so
        # we import them in here
        import EventFactory
        import EventSetFactory

        # updateEventAttributes does all the stuff we can safely do in a unit
        # test, basically whatever does not require Jep. It is up to the test
        # to inject a pure python version of the hazard event.
        hazardEvent = EventFactory.createEvent()

        hazardEvent = self.updateEventAttributes(hazardEvent, eventSet.getAttributes(), \
                                      dialogInputMap, spatialInputMap)

        return EventSetFactory.createEventSet(hazardEvent)

    def toString(self):
        return "DamBreakFloodRecommender"
    
    def updateEventAttributes(self, hazardEvent, sessionDict, dialogDict, spatialDict):
        """
        Creates the hazard event, based on user dialog input and session dict information. 
        
        @param hazardEvent: An empty hazard event to fill with hazard information.
                            This is injectable so that test versions of this object
                            can be used.
        @param sessionDict: A dict of Hazard Services session information
        @param dialogDict: A dict of Hazard Services dialog information  
        @param spatialDict: A dict of Hazard Services spatial input information
        
        @return: A hazard event representing a dam break flash flood watch or warning 
        """
        damName = dialogDict["damName"]
        
        hazardGeometry =  self.getFloodPolygonForDam(damName)

        if hazardGeometry is None:
            return None

        significance = "A"
        subType = None

        urgencyLevel = dialogDict["urgencyLevel"]
        
        if "Failed" in urgencyLevel or "Imminent" in urgencyLevel:
            significance = "W"
            subType = "NonConvective"
            
        staticSettings = sessionDict["staticSettings"]
        currentTime = long(sessionDict["currentTime"])
        startTime = currentTime
        endTime = startTime + self.DEFAULT_FFW_DURATION_IN_MS
        
        hazardEvent.setEventID("")
        hazardEvent.setSiteID(str(staticSettings["defaultSiteID"]))
        hazardEvent.setHazardState("PENDING")
        hazardEvent.setHazardMode("O")
        hazardEvent.setPhenomenon("FF")
        hazardEvent.setSignificance(significance)
        hazardEvent.setSubtype(subType)

        # New recommender framework requires some datetime objects, which must
        # be in units of seconds.
        hazardEvent.setIssueTime(datetime.datetime.fromtimestamp(\
                                   currentTime / MILLIS_PER_SECOND))
        hazardEvent.setStartTime(datetime.datetime.fromtimestamp(\
                                   startTime / MILLIS_PER_SECOND))
        hazardEvent.setEndTime(datetime.datetime.fromtimestamp(\
                                   endTime / MILLIS_PER_SECOND))
        hazardEvent.setGeometry(GeometryFactory.createCollection([hazardGeometry]))

        hazardEvent.setHazardAttributes({"cause":"Dam Failure",
                                          "damName":damName
                                         })
        return hazardEvent
        
    
    def getFloodPolygonForDam(self, damName):
        """
        Returns a user-defined flood hazard polygon for 
        a dam. The base version of this tool does nothing. It is up to the implementer
        to override this method.
        
        @param  damName: The name of the dam for which to retrieve a 
                         hazard polygon
                           
        @return Geometry: A Shapely geometry representing
                          the flood hazard polygon
        """
        if damName in self.damPolygonDict:
            return GeometryFactory.createPolygon(self.damPolygonDict[damName])
        else:
            return None    
        
